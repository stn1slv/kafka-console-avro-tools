name: Go Application Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Go Application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: macOS-latest
            goos: darwin
            goarch: amd64
          - os: macOS-latest
            goos: darwin
            goarch: arm64
        go-version: [1.19]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Get dependencies
        run: go get -v -t -d ./...
        
      - name: Build
        run: go build -v -o kafka-console-avro-tools-${{ matrix.goos }}-${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
          GO111MODULE: on

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: kafka-console-avro-tools-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ./kafka-console-avro-tools-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Download build artifacts
        uses: actions/download-artifact@v2

      - name: Upload Release Assets
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const artifacts = fs.readdirSync(path.resolve(process.env.GITHUB_WORKSPACE));
            for (const artifact of artifacts) {
              if (artifact.startsWith('kafka-console-avro-tools-')) {
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: context.payload.release.id,
                  name: artifact,
                  data: fs.readFileSync(path.resolve(process.env.GITHUB_WORKSPACE, artifact)),
                  headers: {
                    'content-type': 'application/octet-stream',
                    'content-length': fs.statSync(path.resolve(process.env.GITHUB_WORKSPACE, artifact)).size
                  }
                });
              }
            }
