name: Go Application Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Go Application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: macOS-latest
            goos: darwin
            goarch: amd64
          - os: macOS-latest
            goos: darwin
            goarch: arm64
        go-version: [1.19]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
        
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Get dependencies
        run: go get -v -t -d ./...
        
      - name: Build
        run: go build -v -o myapp-${{ matrix.os }}
        env:
          GOOS: ${{ startsWith(matrix.os, 'ubuntu') && 'linux' || startsWith(matrix.os, 'macOS') && 'darwin' || 'windows' }}
          GOARCH: amd64
          CGO_ENABLED: 0
          GO111MODULE: on
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kafka-console-avro-tools-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_name: kafka-console-avro-tools-${{ matrix.goos }}-${{ matrix.goarch }}
          asset_content_type: application/octet-stream
